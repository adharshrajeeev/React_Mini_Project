{"ast":null,"code":"var timespan = require('./lib/timespan');\nvar PS_SUPPORTED = require('./lib/psSupported');\nvar validateAsymmetricKey = require('./lib/validateAsymmetricKey');\nvar jws = require('jws');\nvar _require = require('lodash'),\n  includes = _require.includes,\n  isBoolean = _require.isBoolean,\n  isInteger = _require.isInteger,\n  isNumber = _require.isNumber,\n  isPlainObject = _require.isPlainObject,\n  isString = _require.isString,\n  once = _require.once;\nvar _require2 = require('crypto'),\n  KeyObject = _require2.KeyObject,\n  createSecretKey = _require2.createSecretKey,\n  createPrivateKey = _require2.createPrivateKey;\nvar SUPPORTED_ALGS = ['RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512', 'HS256', 'HS384', 'HS512', 'none'];\nif (PS_SUPPORTED) {\n  SUPPORTED_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');\n}\nvar sign_options_schema = {\n  expiresIn: {\n    isValid: function isValid(value) {\n      return isInteger(value) || isString(value) && value;\n    },\n    message: '\"expiresIn\" should be a number of seconds or string representing a timespan'\n  },\n  notBefore: {\n    isValid: function isValid(value) {\n      return isInteger(value) || isString(value) && value;\n    },\n    message: '\"notBefore\" should be a number of seconds or string representing a timespan'\n  },\n  audience: {\n    isValid: function isValid(value) {\n      return isString(value) || Array.isArray(value);\n    },\n    message: '\"audience\" must be a string or array'\n  },\n  algorithm: {\n    isValid: includes.bind(null, SUPPORTED_ALGS),\n    message: '\"algorithm\" must be a valid string enum value'\n  },\n  header: {\n    isValid: isPlainObject,\n    message: '\"header\" must be an object'\n  },\n  encoding: {\n    isValid: isString,\n    message: '\"encoding\" must be a string'\n  },\n  issuer: {\n    isValid: isString,\n    message: '\"issuer\" must be a string'\n  },\n  subject: {\n    isValid: isString,\n    message: '\"subject\" must be a string'\n  },\n  jwtid: {\n    isValid: isString,\n    message: '\"jwtid\" must be a string'\n  },\n  noTimestamp: {\n    isValid: isBoolean,\n    message: '\"noTimestamp\" must be a boolean'\n  },\n  keyid: {\n    isValid: isString,\n    message: '\"keyid\" must be a string'\n  },\n  mutatePayload: {\n    isValid: isBoolean,\n    message: '\"mutatePayload\" must be a boolean'\n  },\n  allowInsecureKeySizes: {\n    isValid: isBoolean,\n    message: '\"allowInsecureKeySizes\" must be a boolean'\n  },\n  allowInvalidAsymmetricKeyTypes: {\n    isValid: isBoolean,\n    message: '\"allowInvalidAsymmetricKeyTypes\" must be a boolean'\n  }\n};\nvar registered_claims_schema = {\n  iat: {\n    isValid: isNumber,\n    message: '\"iat\" should be a number of seconds'\n  },\n  exp: {\n    isValid: isNumber,\n    message: '\"exp\" should be a number of seconds'\n  },\n  nbf: {\n    isValid: isNumber,\n    message: '\"nbf\" should be a number of seconds'\n  }\n};\nfunction validate(schema, allowUnknown, object, parameterName) {\n  if (!isPlainObject(object)) {\n    throw new Error('Expected \"' + parameterName + '\" to be a plain object.');\n  }\n  Object.keys(object).forEach(function (key) {\n    var validator = schema[key];\n    if (!validator) {\n      if (!allowUnknown) {\n        throw new Error('\"' + key + '\" is not allowed in \"' + parameterName + '\"');\n      }\n      return;\n    }\n    if (!validator.isValid(object[key])) {\n      throw new Error(validator.message);\n    }\n  });\n}\nfunction validateOptions(options) {\n  return validate(sign_options_schema, false, options, 'options');\n}\nfunction validatePayload(payload) {\n  return validate(registered_claims_schema, true, payload, 'payload');\n}\nvar options_to_payload = {\n  'audience': 'aud',\n  'issuer': 'iss',\n  'subject': 'sub',\n  'jwtid': 'jti'\n};\nvar options_for_objects = ['expiresIn', 'notBefore', 'noTimestamp', 'audience', 'issuer', 'subject', 'jwtid'];\nmodule.exports = function (payload, secretOrPrivateKey, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else {\n    options = options || {};\n  }\n  var isObjectPayload = typeof payload === 'object' && !Buffer.isBuffer(payload);\n  var header = Object.assign({\n    alg: options.algorithm || 'HS256',\n    typ: isObjectPayload ? 'JWT' : undefined,\n    kid: options.keyid\n  }, options.header);\n  function failure(err) {\n    if (callback) {\n      return callback(err);\n    }\n    throw err;\n  }\n  if (!secretOrPrivateKey && options.algorithm !== 'none') {\n    return failure(new Error('secretOrPrivateKey must have a value'));\n  }\n  if (secretOrPrivateKey != null && !(secretOrPrivateKey instanceof KeyObject)) {\n    try {\n      secretOrPrivateKey = createPrivateKey(secretOrPrivateKey);\n    } catch (_) {\n      try {\n        secretOrPrivateKey = createSecretKey(typeof secretOrPrivateKey === 'string' ? Buffer.from(secretOrPrivateKey) : secretOrPrivateKey);\n      } catch (_) {\n        return failure(new Error('secretOrPrivateKey is not valid key material'));\n      }\n    }\n  }\n  if (header.alg.startsWith('HS') && secretOrPrivateKey.type !== 'secret') {\n    return failure(new Error(\"secretOrPrivateKey must be a symmetric key when using \".concat(header.alg)));\n  } else if (/^(?:RS|PS|ES)/.test(header.alg)) {\n    if (secretOrPrivateKey.type !== 'private') {\n      return failure(new Error(\"secretOrPrivateKey must be an asymmetric key when using \".concat(header.alg)));\n    }\n    if (!options.allowInsecureKeySizes && !header.alg.startsWith('ES') && secretOrPrivateKey.asymmetricKeyDetails !== undefined &&\n    //KeyObject.asymmetricKeyDetails is supported in Node 15+\n    secretOrPrivateKey.asymmetricKeyDetails.modulusLength < 2048) {\n      return failure(new Error(\"secretOrPrivateKey has a minimum key size of 2048 bits for \".concat(header.alg)));\n    }\n  }\n  if (typeof payload === 'undefined') {\n    return failure(new Error('payload is required'));\n  } else if (isObjectPayload) {\n    try {\n      validatePayload(payload);\n    } catch (error) {\n      return failure(error);\n    }\n    if (!options.mutatePayload) {\n      payload = Object.assign({}, payload);\n    }\n  } else {\n    var invalid_options = options_for_objects.filter(function (opt) {\n      return typeof options[opt] !== 'undefined';\n    });\n    if (invalid_options.length > 0) {\n      return failure(new Error('invalid ' + invalid_options.join(',') + ' option for ' + typeof payload + ' payload'));\n    }\n  }\n  if (typeof payload.exp !== 'undefined' && typeof options.expiresIn !== 'undefined') {\n    return failure(new Error('Bad \"options.expiresIn\" option the payload already has an \"exp\" property.'));\n  }\n  if (typeof payload.nbf !== 'undefined' && typeof options.notBefore !== 'undefined') {\n    return failure(new Error('Bad \"options.notBefore\" option the payload already has an \"nbf\" property.'));\n  }\n  try {\n    validateOptions(options);\n  } catch (error) {\n    return failure(error);\n  }\n  if (!options.allowInvalidAsymmetricKeyTypes) {\n    try {\n      validateAsymmetricKey(header.alg, secretOrPrivateKey);\n    } catch (error) {\n      return failure(error);\n    }\n  }\n  var timestamp = payload.iat || Math.floor(Date.now() / 1000);\n  if (options.noTimestamp) {\n    delete payload.iat;\n  } else if (isObjectPayload) {\n    payload.iat = timestamp;\n  }\n  if (typeof options.notBefore !== 'undefined') {\n    try {\n      payload.nbf = timespan(options.notBefore, timestamp);\n    } catch (err) {\n      return failure(err);\n    }\n    if (typeof payload.nbf === 'undefined') {\n      return failure(new Error('\"notBefore\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n    }\n  }\n  if (typeof options.expiresIn !== 'undefined' && typeof payload === 'object') {\n    try {\n      payload.exp = timespan(options.expiresIn, timestamp);\n    } catch (err) {\n      return failure(err);\n    }\n    if (typeof payload.exp === 'undefined') {\n      return failure(new Error('\"expiresIn\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n    }\n  }\n  Object.keys(options_to_payload).forEach(function (key) {\n    var claim = options_to_payload[key];\n    if (typeof options[key] !== 'undefined') {\n      if (typeof payload[claim] !== 'undefined') {\n        return failure(new Error('Bad \"options.' + key + '\" option. The payload already has an \"' + claim + '\" property.'));\n      }\n      payload[claim] = options[key];\n    }\n  });\n  var encoding = options.encoding || 'utf8';\n  if (typeof callback === 'function') {\n    callback = callback && once(callback);\n    jws.createSign({\n      header: header,\n      privateKey: secretOrPrivateKey,\n      payload: payload,\n      encoding: encoding\n    }).once('error', callback).once('done', function (signature) {\n      // TODO: Remove in favor of the modulus length check before signing once node 15+ is the minimum supported version\n      if (!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {\n        return callback(new Error(\"secretOrPrivateKey has a minimum key size of 2048 bits for \".concat(header.alg)));\n      }\n      callback(null, signature);\n    });\n  } else {\n    var signature = jws.sign({\n      header: header,\n      payload: payload,\n      secret: secretOrPrivateKey,\n      encoding: encoding\n    });\n    // TODO: Remove in favor of the modulus length check before signing once node 15+ is the minimum supported version\n    if (!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {\n      throw new Error(\"secretOrPrivateKey has a minimum key size of 2048 bits for \".concat(header.alg));\n    }\n    return signature;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}