{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar Range = require('../classes/range.js');\nvar Comparator = require('../classes/comparator.js');\nvar ANY = Comparator.ANY;\nvar satisfies = require('../functions/satisfies.js');\nvar compare = require('../functions/compare.js');\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nvar subset = function subset(sub, dom) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (sub === dom) {\n    return true;\n  }\n  sub = new Range(sub, options);\n  dom = new Range(dom, options);\n  var sawNonNull = false;\n  var _iterator = _createForOfIteratorHelper(sub.set),\n    _step;\n  try {\n    OUTER: for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var simpleSub = _step.value;\n      var _iterator2 = _createForOfIteratorHelper(dom.set),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var simpleDom = _step2.value;\n          var isSub = simpleSubset(simpleSub, simpleDom, options);\n          sawNonNull = sawNonNull || isSub !== null;\n          if (isSub) {\n            continue OUTER;\n          }\n        }\n        // the null set is a subset of everything, but null simple ranges in\n        // a complex range should be ignored.  so if we saw a non-null range,\n        // then we know this isn't a subset, but if EVERY simple range was null,\n        // then it is a subset.\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (sawNonNull) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return true;\n};\nvar simpleSubset = function simpleSubset(sub, dom, options) {\n  if (sub === dom) {\n    return true;\n  }\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true;\n    } else if (options.includePrerelease) {\n      sub = [new Comparator('>=0.0.0-0')];\n    } else {\n      sub = [new Comparator('>=0.0.0')];\n    }\n  }\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true;\n    } else {\n      dom = [new Comparator('>=0.0.0')];\n    }\n  }\n  var eqSet = new Set();\n  var gt, lt;\n  var _iterator3 = _createForOfIteratorHelper(sub),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var c = _step3.value;\n      if (c.operator === '>' || c.operator === '>=') {\n        gt = higherGT(gt, c, options);\n      } else if (c.operator === '<' || c.operator === '<=') {\n        lt = lowerLT(lt, c, options);\n      } else {\n        eqSet.add(c.semver);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  if (eqSet.size > 1) {\n    return null;\n  }\n  var gtltComp;\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options);\n    if (gtltComp > 0) {\n      return null;\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null;\n    }\n  }\n\n  // will iterate one or zero times\n  var _iterator4 = _createForOfIteratorHelper(eqSet),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var eq = _step4.value;\n      if (gt && !satisfies(eq, String(gt), options)) {\n        return null;\n      }\n      if (lt && !satisfies(eq, String(lt), options)) {\n        return null;\n      }\n      var _iterator6 = _createForOfIteratorHelper(dom),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _c = _step6.value;\n          if (!satisfies(eq, String(_c), options)) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return true;\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  var higher, lower;\n  var hasDomLT, hasDomGT;\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  var needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;\n  var needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false;\n  }\n  var _iterator5 = _createForOfIteratorHelper(dom),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _c2 = _step5.value;\n      hasDomGT = hasDomGT || _c2.operator === '>' || _c2.operator === '>=';\n      hasDomLT = hasDomLT || _c2.operator === '<' || _c2.operator === '<=';\n      if (gt) {\n        if (needDomGTPre) {\n          if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomGTPre.major && _c2.semver.minor === needDomGTPre.minor && _c2.semver.patch === needDomGTPre.patch) {\n            needDomGTPre = false;\n          }\n        }\n        if (_c2.operator === '>' || _c2.operator === '>=') {\n          higher = higherGT(gt, _c2, options);\n          if (higher === _c2 && higher !== gt) {\n            return false;\n          }\n        } else if (gt.operator === '>=' && !satisfies(gt.semver, String(_c2), options)) {\n          return false;\n        }\n      }\n      if (lt) {\n        if (needDomLTPre) {\n          if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomLTPre.major && _c2.semver.minor === needDomLTPre.minor && _c2.semver.patch === needDomLTPre.patch) {\n            needDomLTPre = false;\n          }\n        }\n        if (_c2.operator === '<' || _c2.operator === '<=') {\n          lower = lowerLT(lt, _c2, options);\n          if (lower === _c2 && lower !== lt) {\n            return false;\n          }\n        } else if (lt.operator === '<=' && !satisfies(lt.semver, String(_c2), options)) {\n          return false;\n        }\n      }\n      if (!_c2.operator && (lt || gt) && gtltComp !== 0) {\n        return false;\n      }\n    }\n\n    // if there was a < or >, and nothing in the dom, then must be false\n    // UNLESS it was limited by another range in the other direction.\n    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false;\n  }\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false;\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false;\n  }\n  return true;\n};\n\n// >=1.2.3 is lower than >1.2.3\nvar higherGT = function higherGT(a, b, options) {\n  if (!a) {\n    return b;\n  }\n  var comp = compare(a.semver, b.semver, options);\n  return comp > 0 ? a : comp < 0 ? b : b.operator === '>' && a.operator === '>=' ? b : a;\n};\n\n// <=1.2.3 is higher than <1.2.3\nvar lowerLT = function lowerLT(a, b, options) {\n  if (!a) {\n    return b;\n  }\n  var comp = compare(a.semver, b.semver, options);\n  return comp < 0 ? a : comp > 0 ? b : b.operator === '<' && a.operator === '<=' ? b : a;\n};\nmodule.exports = subset;","map":null,"metadata":{},"sourceType":"script"}